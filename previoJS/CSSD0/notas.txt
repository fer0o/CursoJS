estructura del css
selector {
    propiedad: valor
}

selector: es lo que se quiere cambiar de la propiedad
propiedad: es el estilo que quiere darse

CSS selectores:
    -selector universal * afecta todo
    -de tipo: seleccionar por el nombre de los elementos
    -Por clases: agregar el atributo class = "nombre de la clase" (es un atributo) y para definirlo en css se empieza con un punto
    -Por ID se usa por # y nombre del ID
/////////////////////////////////////////////////////////////////////////////////////////////////////
    especificidad: jerarquía de CSS !important le gana a todo   
    !important
    estilos en linea
    Identificadores
    clases
    pseaudo-clases
    atributos
    elementos
    pseudo-elementos

///////////////////////////////////////////////////////////////////////////////////////////////////////
    metodología BEM
    consiste en evitar conflictos 
    conocer las clases que estamos usando 
    "estructura de metodología BEM"
    class="tipo de elemento __ (2 guiones bajos) y tipo de elemento"
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    Medidas:
    relativas y fijas

    typografia 
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    propiedades de texto
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    normalize

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    teoría de cajas

    en línea o en bloque
    propiedades
    a las propiedades en linea no se puede darle propiedades
    propiedades 


    box model:
        -content: line-height
        -padding: padding
        -border: border
        -margin: margin

///////////////////
boxshadow
//////////////////////
Outline
propiedad que hace un tipo borde pero sin afectar a las demas cajas del DOM (documento Object Model)    
border afecta el tamaño del objeto mientras que el Outline no 
//////////////////////
afecta el flujo que es el orden del html
top y left tienen mas peso dentro de todo el DOM
position:
    Static
    Relative: siempre conserva su atributo prioriza el top y left y adquiere el zindex
    absolute: 
    fixed: posicionamiento fijo no importa si se mueve 
    sticky
    

    zindex: valor para mostrar el contenido con prioridad en el eje z osea que se superpone de cualquier elemento que tenga la misma posicion
    /////////////////////////////////////////////////////////////////
    display:
    in-line: no se les puede modificar la resoluición 

    overflow:sobrante sorthunt properti


    //////////////////////////////////
    float
    maquetación con float ya no se ve mas, sirve para hacer imagenes con descripción principalemente.
    ejemplo comentado con nagatoro linea 134-160

    ////pseaudo elementos/////////////
    no es un elemento del DOM,si tiene cambios visuales. muy parecido al Outline
    
    ::first-line -> block
    ::first-letter ->block
    ::placeholder ->
    ::after-> hijos-content (necesario) -InLine
    ::before ->hijos-content (necesario) -InLine
    ::selection

los pseudo elemento se crea para los otros pseudoelementos
before y after no son parte del DOM 

placeholder: para poner dentro del input un mensaje que se eliminara cuando se llene el campo
esta funcion se le pueden dar atributos. En el ejemplo se le dio el atributo de color tanto como el campo de texto como de la letra. Todo esto cambia cuando se introduce texto
-----ejemplo------------------|
input::placeholder{            
    color: chartreuse;
    background-color: black; 
}
------------------------------|

selection:
esta funcion es para cuando se seleccione o sombree una parte del texto cambie dependiendo las propiedades que se le den
en este ejemplo se uso un texto lorem y con un selector de <p>lorem</p> que se sombree de color negro con texto verde
p{
    padding: 6px;
    width: 100%;
}
p::selection{
    color: chartreuse;
    background-color: black;
}
esta propiedad es inline, por lo cual no se pueden hacer muchos cambios en cuanto a su transformación 

--------------------------------------------
Before y after
propiedad que no es del DOM, se va a declarar dentro de la hoja de estilos y aparecera ciertas caracteristicas de esa funcionalidad 

funciona con elementos inline como en bloque
--------ejemplo-------------------
b{
    padding: 6px;
    width: 100%;
}
b::before{

    content: " me suscribi  ";
    color: aliceblue;
}
b::after{
    content: "ventaneando";
    color: coral;

}
---------pseudo clases-------------------
Escuchan un evento 
las mas comunes:
    hover: Escucha el evento cuando el mouse esta por encima del elemento, se le pueden dar mas opciones a la propiedad y se pueden agregar mas dependiendo si quieres 
    agregar otra clase .clase1 + .clase2
    ejemplo:
    .hide {
    display: none;

  }
  .myDIV:hover + .hide{
    width: 400px;
    height: 400px;
    display: block;
    color: red;
    background-color: blueviolet;
    background-image: url("https://i1.wp.com/elpalomitron.com/wp-content/uploads/2020/07/anime-Ijiranaide-Nagatoro-san-destacada-El-Palomitr%C3%B3n.jpg?resize=1200%2C600&ssl=1");
  }
  //////////////////////////////////
  para este ejemplo del curso se pone de esta forma
  .caja1{
    width: 200px;
    height: 200px;
    background: crimson;
    transition: width 2s, height 4s, background 2s ; (si se quiere dar un efecto de animación con tiempo en hover se le pone la propiedad transition y se le especifica la duración y cambios si se va a agregar uno )
}
.caja1:hover{
    width: 300px;
    height: 300px;
    background: blue;
    
}




    ------------------------

    link: sirve para dar los enlaces y marca los enlaces no visitados
    con esta propiedad cuando ya se ha visitado un link se marca se puede marcar de un cierto color
    y para carle un color a los links que aun no visitamos es con la propiedad :visited
    -------------ejemplo-------------------------------
.caja1:link{
    color: crimson;
    }
.caja1:visited{
    color: chocolate;
}
en .caja1:link tiene las propiedades de marcar de color carmesí los links que aún no están visitados
y con la propiedad de visited esta declarada que cada enlace que ya fueron visitados en algún momento estan de color chocolate

nivel de especificidad afecta

    
    ------------------
    
    active: Al dejar apretado un boton cambias los estilos
    esta propiedad se le pueden dar mas estilos un ejemplo es es el de transition o tamaño.
    ----------------------ejemplo------------------------------------
    .caja1{
width: 300px;
height: 300px;
background: crimson;
margin: 25px;
}

.caja1:active{
    background: teal;
    transition: 2s;
}
se crea una propiedad caja1{
    ccon un tamaño de 300 x 300 y un color carmesí 
}
cuando se le da la de active es que cuando se le da un click al cuadrado cambia de color por el contenido de  .caja1:active{
    qye tiene un color como verde y tiene una transision de 2 seg, es decir que cambia de color en ese tiempo
}
------------------------------------
    focus: El focus es como cambia una propiedad solamente cuando esta enfocada, es decir que se cuando tiene alguna funcionalidad especial que requiera que el usuario tenga que usuarioun input, form etc que el usuario interactue va a cambiar
    o se va a modificar.
--------------------------------ejemplo focus---------------------------
.caja1{
width: 300px;
height: 300px;
background: crimson;
margin: 25px;
}
en html tiene declarado un input, este elemento es donde se va a hacer el focus cuando el usuario lo necesite, en caso de usarlo el elemento va a cambiar
la caja1 que tiene la propuedad de un cuadrado va a cambiar.
.caja1:focus{
    background: teal;
    transition: 2s;
    width: 600px;
    height: 400px;
}
al hacer click para el input el cuadrado va a hacerse grande y va a cambiar de color con una transicion de 2 s


focus se puede usar mucho en forms con inputs para poder saber cuando hay que escribir con un transition de color
---------------------------------------------------------------------




    lang: lang es una funcion y requiere de un parametro en que lenguaje quieres modificar el mensaje
    -----------------------------ejemplo----------------------------

.caja1 b:lang(es){
    background-color: tomato;
    padding: 20;

}
aqui en el lang el parametro que seleccioné es "es" que es para español y que lo reconozca dentro del html en <b></b> se declara el lang y el parametro para que se identifique que es
cuando lo detecta lo cambia dependiendo que es lo que se le haya declarado
.caja1 b:lang(jp){
    background-color: violet;
    padding: 20;


--------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------Object-Fit---------------------------------------------------------------------------------------------
Estas se usarn principalmente para imagenes
problemas que soluciona  

principales para revisar
Contain:
 Con esta propiedad la imagen se va a ajustar a el contenedor sin distorcionar la imagen, en este ejemplo 
la imagen tiene una resolución de 1084 x 1111 es una imagen grande. Pero el div contenedor tiene un tamaño de 200 x 600, sin el object-fit: contain; la imagen se distorciona y queda aplastada en lo ancho
con esta propiedad lo que hace es que la imagen agarra las medidas y escala la imagen para que se vea con contenido completo en el div contenedor.
--------------------------ejemplo-----------------------------------------------
.caja1{

margin: 25px;
width: 200px;
height: 600px;
}
div contenedor tiene una dimension de 200 de ancho x 600 de alto

.caja1 img{
    width: 100%;
    height: 100%;
    border: teal 5px solid;
    object-fit: contain;
}
cuando le damos la propiedad de contain la imagen se muestra como completa ajustada en la ventaneando
----------------------------------------------------------------------------
----------------------------------cover-------------------------------------
Cover:
Con esta propiedad la imagen que tengas se va a ajustar a las dimensiones que tenga el contenedor, la imagen la va a ajustar sin perder la resolucion
...............................ejemplo........................................
.caja1{

margin: 25px;
width: 360px;
height: 600px;
}
se modificó el ancho del contenedor div para hacerlo mas estrecho, con esto sería un rectangulo en vertical que es mas chico que la resolución de la imagen

.caja1 img{
    width: 100%;
    height: 100%;
    border: teal 5px solid;
    object-fit: cover;
}
con la propiedad object-fit: cover se ajusta el tamaño de la imagen recortando los bordes para ajustarse al contenedor
-----------------------------------------------------------------------------
None: agarra las propiedades originales de la imagen, no importa el tamaño del contenedor y pone el cacho de imagen que debe ser en esa posicion, si la imagen es muy grande solo aparecera esa parte
si la imagen es muy pequeña lo va a poner con el tamaño de la imagen, dejando bordes en el contenedor.
-----------------------------------------------------------------------------------
Scale-Down: agarra el valor del contenedor o de la imagen con el valor mas bajo
--------------------------------------------------------------------------------------
Todas estas son para la modificacion de imagenes y se muevan a determinado lugar o determinada distancia

Object-Position:
left
Right
Top
Button
PX
EM
%
ETC
-------------------------------------------------------------------------------------------
...........................................................................................
..........................................cursores.........................................
es cambiar el diseño del cursor dentro de un determinado objeto
puede ser util cuando en cierto lado se tienen otras funcionalidades como copy, scroll, progress

.........................................colores.............................................
rgb
red, blue, green
(0,0,0) negro
(255,255,255) blanco
intermedios de todos es gris
rgba
red green blue alpha (opacidad)
 no hay código todo fue teoría
 .................................................................................................
 .....................................Responsive design Mobile First..............................
 Concepto que trabaja con las diferentes resoluciones

media querty

!!!!importante a estudiar para react, re hacer pagina o buscar como hacer esa parte de la imagen!!!!!!!
los media queries sirven para que la pantalla se haga resposive con el contenido que muestra en pantalla
--------------------ejemplo---------------------------------
div{
    width: 49%;
    display: inline-block;
    padding: 20px;
    background-color: #ddd;
}
div mostrando cuadrados color gris con un porcentaje de 49% se muestran en linea con un padding del inicio de 20px
h1{
    font-size: 24px;
}

.caja2{
    background: #bbb;
}

@media only screen and (max-width: 800px) {
    div{
        display: block;
        width: 100%;
    }
    h1{
        font-size: 20px;
    }
}

aqui se declara la resolucion de la pantalla. con el media querty se le da la propiedad que cuando la resolucionde la pantalla es de 800px todo el contenido de los divs 
pase para abajo del primer elemento adaptando todo el contenido dentro de buen forma y no perdiendo información


-----------------------------------------------------Practica menu responsive sin JS----------------------------------------------------------------------------




