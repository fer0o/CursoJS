estructura del css
selector {
    propiedad: valor
}

selector: es lo que se quiere cambiar de la propiedad
propiedad: es el estilo que quiere darse

CSS selectores:
    -selector universal * afecta todo
    -de tipo: seleccionar por el nombre de los elementos
    -Por clases: agregar el atributo class = "nombre de la clase" (es un atributo) y para definirlo en css se empieza con un punto
    -Por ID se usa por # y nombre del ID
/////////////////////////////////////////////////////////////////////////////////////////////////////
    especificidad: jerarquía de CSS !important le gana a todo   
    !important
    estilos en linea
    Identificadores
    clases
    pseaudo-clases
    atributos
    elementos
    pseudo-elementos

///////////////////////////////////////////////////////////////////////////////////////////////////////
    metodología BEM
    consiste en evitar conflictos 
    conocer las clases que estamos usando 
    "estructura de metodología BEM"
    class="tipo de elemento __ (2 guiones bajos) y tipo de elemento"
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    Medidas:
    relativas y fijas

    typografia 
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    propiedades de texto
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    normalize

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    teoría de cajas

    en línea o en bloque
    propiedades
    a las propiedades en linea no se puede darle propiedades
    propiedades 


    box model:
        -content: line-height
        -padding: padding
        -border: border
        -margin: margin

///////////////////
boxshadow
//////////////////////
Outline
propiedad que hace un tipo borde pero sin afectar a las demas cajas del DOM (documento Object Model)    
border afecta el tamaño del objeto mientras que el Outline no 
//////////////////////
afecta el flujo que es el orden del html
top y left tienen mas peso dentro de todo el DOM
position:
    Static
    Relative: siempre conserva su atributo prioriza el top y left y adquiere el zindex
    absolute: 
    fixed: posicionamiento fijo no importa si se mueve 
    sticky
    

    zindex: valor para mostrar el contenido con prioridad en el eje z osea que se superpone de cualquier elemento que tenga la misma posicion
    /////////////////////////////////////////////////////////////////
    display:
    in-line: no se les puede modificar la resoluición 

    overflow:sobrante sorthunt properti


    //////////////////////////////////
    float
    maquetación con float ya no se ve mas, sirve para hacer imagenes con descripción principalemente.
    ejemplo comentado con nagatoro linea 134-160

    ////pseaudo elementos/////////////
    no es un elemento del DOM,si tiene cambios visuales. muy parecido al Outline
    
    ::first-line -> block
    ::first-letter ->block
    ::placeholder ->
    ::after-> hijos-content (necesario) -InLine
    ::before ->hijos-content (necesario) -InLine
    ::selection

los pseudo elemento se crea para los otros pseudoelementos
before y after no son parte del DOM 

placeholder: para poner dentro del input un mensaje que se eliminara cuando se llene el campo
esta funcion se le pueden dar atributos. En el ejemplo se le dio el atributo de color tanto como el campo de texto como de la letra. Todo esto cambia cuando se introduce texto
-----ejemplo------------------|
input::placeholder{            
    color: chartreuse;
    background-color: black; 
}
------------------------------|

selection:
esta funcion es para cuando se seleccione o sombree una parte del texto cambie dependiendo las propiedades que se le den
en este ejemplo se uso un texto lorem y con un selector de <p>lorem</p> que se sombree de color negro con texto verde
p{
    padding: 6px;
    width: 100%;
}
p::selection{
    color: chartreuse;
    background-color: black;
}
esta propiedad es inline, por lo cual no se pueden hacer muchos cambios en cuanto a su transformación 

--------------------------------------------
Before y after
propiedad que no es del DOM, se va a declarar dentro de la hoja de estilos y aparecera ciertas caracteristicas de esa funcionalidad 

funciona con elementos inline como en bloque
--------ejemplo-------------------
b{
    padding: 6px;
    width: 100%;
}
b::before{

    content: " me suscribi  ";
    color: aliceblue;
}
b::after{
    content: "ventaneando";
    color: coral;

}
---------pseudo clases-------------------
Escuchan un evento 
las mas comunes:
    hover: Escucha el evento cuando el mouse esta por encima del elemento, se le pueden dar mas opciones a la propiedad y se pueden agregar mas dependiendo si quieres 
    agregar otra clase .clase1 + .clase2
    ejemplo:
    .hide {
    display: none;

  }
  .myDIV:hover + .hide{
    width: 400px;
    height: 400px;
    display: block;
    color: red;
    background-color: blueviolet;
    background-image: url("https://i1.wp.com/elpalomitron.com/wp-content/uploads/2020/07/anime-Ijiranaide-Nagatoro-san-destacada-El-Palomitr%C3%B3n.jpg?resize=1200%2C600&ssl=1");
  }
  //////////////////////////////////
  para este ejemplo del curso se pone de esta forma
  .caja1{
    width: 200px;
    height: 200px;
    background: crimson;
    transition: width 2s, height 4s, background 2s ; (si se quiere dar un efecto de animación con tiempo en hover se le pone la propiedad transition y se le especifica la duración y cambios si se va a agregar uno )
}
.caja1:hover{
    width: 300px;
    height: 300px;
    background: blue;
    
}




    ------------------------

    link: sirve para dar los enlaces y marca los enlaces no visitados
    con esta propiedad cuando ya se ha visitado un link se marca se puede marcar de un cierto color
    y para carle un color a los links que aun no visitamos es con la propiedad :visited
    -------------ejemplo-------------------------------
.caja1:link{
    color: crimson;
    }
.caja1:visited{
    color: chocolate;
}
en .caja1:link tiene las propiedades de marcar de color carmesí los links que aún no están visitados
y con la propiedad de visited esta declarada que cada enlace que ya fueron visitados en algún momento estan de color chocolate

nivel de especificidad afecta

    
    ------------------
    
    active: Al dejar apretado un boton cambias los estilos
    esta propiedad se le pueden dar mas estilos un ejemplo es es el de transition o tamaño.
    ----------------------ejemplo------------------------------------
    .caja1{
width: 300px;
height: 300px;
background: crimson;
margin: 25px;
}

.caja1:active{
    background: teal;
    transition: 2s;
}
se crea una propiedad caja1{
    ccon un tamaño de 300 x 300 y un color carmesí 
}
cuando se le da la de active es que cuando se le da un click al cuadrado cambia de color por el contenido de  .caja1:active{
    qye tiene un color como verde y tiene una transision de 2 seg, es decir que cambia de color en ese tiempo
}
------------------------------------
    focus: El focus es como cambia una propiedad solamente cuando esta enfocada, es decir que se cuando tiene alguna funcionalidad especial que requiera que el usuario tenga que usuarioun input, form etc que el usuario interactue va a cambiar
    o se va a modificar.
--------------------------------ejemplo focus---------------------------
.caja1{
width: 300px;
height: 300px;
background: crimson;
margin: 25px;
}
en html tiene declarado un input, este elemento es donde se va a hacer el focus cuando el usuario lo necesite, en caso de usarlo el elemento va a cambiar
la caja1 que tiene la propuedad de un cuadrado va a cambiar.
.caja1:focus{
    background: teal;
    transition: 2s;
    width: 600px;
    height: 400px;
}
al hacer click para el input el cuadrado va a hacerse grande y va a cambiar de color con una transicion de 2 s
---------------------------------------------------------------------




    lang:





    
